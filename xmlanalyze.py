#!/usr/local/bin/python2.7
# encoding: utf-8
'''
xmlanalyze -- Analyze configurations stored in XML files

xmlanalyze is a XML parser and analyzer for information stored in configuration files generated by Renesas Software Package Generation Tools.

It defines classes_and_methods

@author:     Onkar Raut

@copyright:  2020 electrotantra.tech. All rights reserved.

@license:    license

@contact:    rautonkar@gmail.com
@deffield    updated: Updated
'''

import sys
import os
import logging
import xml.dom.minidom

from argparse import ArgumentParser
from argparse import RawDescriptionHelpFormatter

__all__ = []
__version__ = 0.1
__date__ = '2020-04-05'
__updated__ = '2020-04-05'

DEBUG = 1
TESTRUN = 0
PROFILE = 0

class CLIError(Exception):
    '''Generic exception to raise and log different fatal errors.'''
    def __init__(self, msg):
        super(CLIError).__init__(type(self))
        self.msg = "E: %s" % msg
        logging.error(msg)
    def __str__(self):
        return self.msg
    def __unicode__(self):
        return self.msg

class PROPERTY(object):
    def __init__(self, idf, dflt, desc):
        self.id = idf
        self.default = dflt
        self.description = desc
        
        logging.info("Property: Id:%s, Default:%s, Desc:%s " %  (idf,dflt, desc))

class COMPONENT(object):
    def __init__(self, vendor, class_name, subgroup, group, version, variant):
        self.vendor = vendor
        self.class_name = class_name
        self.subgroup = subgroup
        self.group = group
        self.version = version
        self.variant = variant
        self.file = "%(vendor)s##%(class_name)s##%(group)s##%(subgroup)s##%(variant)s##%(version)s.xml" % {"vendor": vendor,
                                                                                              "class_name":class_name,
                                                                                              "group":group,
                                                                                              "subgroup":subgroup,
                                                                                              "variant":variant,
                                                                                              "version":version}
        self.property_list = set()
        logging.info("Component: %s, %s, %s, %s, %s, %s, %s" % (vendor, 
                                     class_name, 
                                     subgroup, 
                                     group, 
                                     version,
                                     variant,
                                     file))

class XMLCFG(object):
    def __init__(self, moduleDescriptions, xmlpath):
        if False == os.path.exists(xmlpath) or True ==  os.path.isdir(xmlpath):
            raise CLIError("File %s does not exist or invalid input provided." % xmlpath)
        
        self.src = xmlpath
        self.component_list = set()
        self.module_name_list = []
        self.config_list = []
        
        self.src = xmlpath
        self.DOMTree = xml.dom.minidom.parse(xmlpath)
        self.cproject = self.DOMTree.documentElement
        
        """ Identify all components """
        componentList = self.cproject.getElementsByTagName("component")
        for component in componentList:
            class_name = r""
            subgroup = r""
            vendor = r""
            group = r""
            version = r""
            variant = r""
            
            if component.hasAttribute("class"):
                """ Print the class """
                class_name += component.getAttribute("class")
                
            if component.hasAttribute("subgroup"):
                """ Print the sub group name """
                subgroup += component.getAttribute("subgroup")
                
            if component.hasAttribute("group"):
                """ Print the sub group name """
                group += component.getAttribute("group")
                
            if component.hasAttribute("vendor"):
                """ Print the vendor name """
                vendor += component.getAttribute("vendor")
                
            if component.hasAttribute("version"):
                """ Print the version """
                version += component.getAttribute("version")
            
            if component.hasAttribute("variant"):
                """ Print the version """
                variant += component.getAttribute("variant")

            new_component = COMPONENT(vendor, class_name, subgroup, group, version, variant)
            
            fp = moduleDescriptions + new_component.file
            if False == os.path.isfile(fp):
                    raise CLIError("%s does not exist at location specified by --install" % fp)
            
            new_component.file = fp
            
            componentDOMTree = xml.dom.minidom.parse(fp)
            elementTree = componentDOMTree.documentElement
            propertyList = elementTree.getElementsByTagName("property")
            
            for prpty in propertyList:
                idf = r""
                idfDefault = r""
                idfDescription = r""
                if prpty.hasAttribute("id"):
                    idf += prpty.getAttribute("id")
                if prpty.hasAttribute("default"):
                    idfDefault += prpty.getAttribute("default")
                if prpty.hasAttribute("description"):
                    idfDescription += prpty.getAttribute("description")
                newProperty = PROPERTY(idf, idfDefault, idfDescription)
                
                new_component.property_list.add(newProperty)
            
            self.component_list.add(new_component)
        
        """ Identify all modules """
        moduleList = self.cproject.getElementsByTagName("module") 
        for module in moduleList:
            self.module_name_list.append(module)
        
        """ Identify all configuration values """
        configList = self.cproject.getElementsByTagName("config")
        for config in configList:
            self.config_list.append(config)
        
        return
    
    def read_defaults(self): 
        for component in self.component_list:
            self.DOMTree = xml.dom.minidom.parse(component.file)
            
        
        
def main(argv=None): # IGNORE:C0111
    '''Command line options.'''

    if argv is None:
        argv = sys.argv
    else:
        sys.argv.extend(argv)

    program_name = os.path.basename(sys.argv[0])
    program_version = "v%s" % __version__
    program_build_date = str(__updated__)
    program_version_message = '%%(prog)s %s (%s)' % (program_version, program_build_date)
    program_shortdesc = __import__('__main__').__doc__.split("\n")[1]
    program_license = '''%s

  Created by Onkar Raut on %s.
  Copyright 2020 electrotantra. All rights reserved.

  Licensed under the Apache License 2.0
  http://www.apache.org/licenses/LICENSE-2.0

  Distributed on an "AS IS" basis without warranties
  or conditions of any kind, either express or implied.

USAGE
''' % (program_shortdesc, str(__date__))

    try:
        # Setup argument parser
        parser = ArgumentParser(description=program_license, formatter_class=RawDescriptionHelpFormatter)
        parser.add_argument("-r", "--recursive", dest="recurse", action="store_true", help="recurse into subfolders [default: %(default)s]")
        parser.add_argument('-l', '--log', dest='logfile', help='Specify where logger information should be output.')
        parser.add_argument("-v", "--verbose", dest="verbose", action="count", help="set verbosity level [default: %(default)s]")
        parser.add_argument("-i", "--install", dest="install", help="Path to location where Renesas Software Package Tool, such as e2studio or Smart Configurator, is installed. [default: %(default)s]", metavar="RE" )
        parser.add_argument("-e", "--exclude", dest="exclude", help="exclude paths matching this regex pattern. [default: %(default)s]", metavar="RE" )
        parser.add_argument('-V', '--version', action='version', version=program_version_message)
        parser.add_argument('-x', '--xml', dest='xmlfile', help='Specify full path to one or more configuration.xml files. E.g.: \"./my_folder/configuration.xml\" ')
        
        parser.add_argument(dest="paths", help="paths to folder(s) with source file(s) [default: %(default)s]", metavar="path", nargs='+')

        # Process arguments
        args = parser.parse_args()
        
        if args.logfile is not None:
            logging.basicConfig(filename=args.logfile, level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
        else:
            logging.basicConfig(level=logging.INFO, format='%(module)s: %(asctime)s - %(levelname)s - %(message)s')

        paths = args.paths
        verbose = args.verbose
        recurse = args.recurse
        inpat = args.install
        expat = args.exclude

        if verbose > 0:
            print("Verbose mode on")
            if recurse:
                logging.info("Recursive mode on")
            else:
                logging.info("Recursive mode off")
                
        if False == os.path.exists(inpat):
            raise CLIError("Installation Directory does not contain XMLs")
        elif False == os.path.exists(inpat + r"/internal/projectgen/ra/modules"):
            raise CLIError("Installation Directory does not contain XMLs extracted from pack file. Run the configurator atleast once.")

        if inpat and expat and inpat == expat:
            raise CLIError("include and exclude pattern are equal! Nothing will be processed.")
        
        listxml = []
        modules = inpat + r"/internal/projectgen/ra/modules/"

        for inpath in paths:
            ### do something with inpath ###
            obj = XMLCFG(modules,inpath)
            listxml.append(obj)
        return 0
    except KeyboardInterrupt:
        ### handle keyboard interrupt ###
        return 0
    except Exception as e:
        if DEBUG or TESTRUN:
            raise(e)
        indent = len(program_name) * " "
        sys.stderr.write(program_name + ": " + repr(e) + "\n")
        sys.stderr.write(indent + "  for help use --help")
        return 2

if __name__ == "__main__":
    if DEBUG:
#         sys.argv.append("-h")
        sys.argv.append("-v")
        sys.argv.append("-r")
    if TESTRUN:
        import doctest
        doctest.testmod()
    if PROFILE:
        import cProfile
        import pstats
        profile_filename = 'xmlanalyze_profile.txt'
        cProfile.run('main()', profile_filename)
        statsfile = open("profile_stats.txt", "wb")
        p = pstats.Stats(profile_filename, stream=statsfile)
        stats = p.strip_dirs().sort_stats('cumulative')
        stats.print_stats()
        statsfile.close()
        sys.exit(0)
    sys.exit(main())
